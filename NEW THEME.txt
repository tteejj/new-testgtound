# Enhanced Theme System Module
# Advanced theming with gradients, effects, and visual styles

#region Theme Presets

$script:ThemePresets = @{
    "Cyberpunk" = @{
        Name = "Cyberpunk"
        Description = "Neon-lit dystopian future"
        Palette = @{
            PrimaryFG = "#FF00FF"
            SecondaryFG = "#00FFFF"
            AccentFG = "#FF1493"
            SuccessFG = "#00FF00"
            ErrorFG = "#FF0040"
            WarningFG = "#FFFF00"
            InfoFG = "#00BFFF"
            HeaderFG = "#FF00FF"
            SubtleFG = "#8B008B"
            Background = "#0D0D0D"
        }
        Effects = @{
            GlowEffect = $true
            AnimatedText = $true
            NeonBorders = $true
        }
    }
    "Matrix" = @{
        Name = "Matrix"
        Description = "Follow the white rabbit"
        Palette = @{
            PrimaryFG = "#00FF00"
            SecondaryFG = "#008F00"
            AccentFG = "#00FF00"
            SuccessFG = "#00FF00"
            ErrorFG = "#FF0000"
            WarningFG = "#FFFF00"
            InfoFG = "#00FF00"
            HeaderFG = "#00FF00"
            SubtleFG = "#004F00"
            Background = "#000000"
        }
        Effects = @{
            MatrixRain = $true
            GreenGlow = $true
            MonoChrome = $true
        }
    }
    "Synthwave" = @{
        Name = "Synthwave"
        Description = "80s retro-futuristic vibes"
        Palette = @{
            PrimaryFG = "#FF6EC7"
            SecondaryFG = "#B967FF"
            AccentFG = "#01CDFE"
            SuccessFG = "#05FFA1"
            ErrorFG = "#FF71CE"
            WarningFG = "#FFFB96"
            InfoFG = "#01CDFE"
            HeaderFG = "#FF6EC7"
            SubtleFG = "#8B5A8F"
            Background = "#1A0033"
        }
        Effects = @{
            ChromaticAberration = $true
            RetroGrid = $true
            NeonGlow = $true
        }
    }
    "Nord" = @{
        Name = "Nord"
        Description = "Arctic, north-bluish clean and elegant"
        Palette = @{
            PrimaryFG = "#D8DEE9"
            SecondaryFG = "#E5E9F0"
            AccentFG = "#88C0D0"
            SuccessFG = "#A3BE8C"
            ErrorFG = "#BF616A"
            WarningFG = "#EBCB8B"
            InfoFG = "#81A1C1"
            HeaderFG = "#5E81AC"
            SubtleFG = "#4C566A"
            Background = "#2E3440"
        }
        Effects = @{
            SoftShadows = $true
            MinimalBorders = $true
            CleanDesign = $true
        }
    }
    "Dracula" = @{
        Name = "Dracula"
        Description = "Dark theme for the creatures of the night"
        Palette = @{
            PrimaryFG = "#F8F8F2"
            SecondaryFG = "#6272A4"
            AccentFG = "#BD93F9"
            SuccessFG = "#50FA7B"
            ErrorFG = "#FF5555"
            WarningFG = "#F1FA8C"
            InfoFG = "#8BE9FD"
            HeaderFG = "#FF79C6"
            SubtleFG = "#44475A"
            Background = "#282A36"
        }
        Effects = @{
            VampireMode = $true
            PurpleAccents = $true
            DarkContrast = $true
        }
    }
}

#endregion

#region Gradient Support

function global:Get-GradientText {
    param(
        [string]$Text,
        [string]$StartColor,
        [string]$EndColor,
        [switch]$Bold
    )
    
    if ($Text.Length -eq 0) { return "" }
    
    # Parse hex colors
    $startR = [Convert]::ToInt32($StartColor.Substring(1,2), 16)
    $startG = [Convert]::ToInt32($StartColor.Substring(3,2), 16)
    $startB = [Convert]::ToInt32($StartColor.Substring(5,2), 16)
    
    $endR = [Convert]::ToInt32($EndColor.Substring(1,2), 16)
    $endG = [Convert]::ToInt32($EndColor.Substring(3,2), 16)
    $endB = [Convert]::ToInt32($EndColor.Substring(5,2), 16)
    
    $result = ""
    $boldCode = if ($Bold) { "`e[1m" } else { "" }
    
    for ($i = 0; $i -lt $Text.Length; $i++) {
        $progress = $i / [Math]::Max(1, $Text.Length - 1)
        
        $r = [Math]::Round($startR + ($endR - $startR) * $progress)
        $g = [Math]::Round($startG + ($endG - $startG) * $progress)
        $b = [Math]::Round($startB + ($endB - $startB) * $progress)
        
        $result += "${boldCode}`e[38;2;${r};${g};${b}m$($Text[$i])"
    }
    
    return $result + "`e[0m"
}

#endregion

#region Visual Effects

function global:Show-TypewriterText {
    param(
        [string]$Text,
        [int]$Delay = 50,
        [string]$Color = "#FFFFFF"
    )
    
    foreach ($char in $Text.ToCharArray()) {
        Write-Host (Apply-PSStyle -Text $char -FG $Color) -NoNewline
        Start-Sleep -Milliseconds $Delay
    }
    Write-Host
}

function global:Show-GlowText {
    param(
        [string]$Text,
        [string]$GlowColor = "#00FFFF",
        [int]$GlowIntensity = 3
    )
    
    # Simulate glow with layered text
    $r = [Convert]::ToInt32($GlowColor.Substring(1,2), 16)
    $g = [Convert]::ToInt32($GlowColor.Substring(3,2), 16)
    $b = [Convert]::ToInt32($GlowColor.Substring(5,2), 16)
    
    # Create dimmer glow layers
    for ($i = $GlowIntensity; $i -gt 0; $i--) {
        $intensity = 0.3 * ($i / $GlowIntensity)
        $dimR = [Math]::Round($r * $intensity)
        $dimG = [Math]::Round($g * $intensity)
        $dimB = [Math]::Round($b * $intensity)
        
        $glowLayer = "`e[38;2;${dimR};${dimG};${dimB}m"
        
        # Position cursor for overlay effect (simplified)
        Write-Host "${glowLayer}$Text`e[0m"
    }
    
    # Write main text
    Write-Host (Apply-PSStyle -Text $Text -FG $GlowColor -Bold)
}

function global:Show-MatrixRain {
    param(
        [int]$Duration = 5,
        [int]$Columns = 10
    )
    
    $chars = "ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝ0123456789".ToCharArray()
    $rain = @{}
    
    for ($i = 0; $i -lt $Columns; $i++) {
        $rain[$i] = @{
            Position = Get-Random -Minimum 0 -Maximum 20
            Speed = Get-Random -Minimum 1 -Maximum 3
        }
    }
    
    $endTime = (Get-Date).AddSeconds($Duration)
    
    while ((Get-Date) -lt $endTime) {
        Clear-Host
        
        for ($row = 0; $row -lt 20; $row++) {
            for ($col = 0; $col -lt $Columns; $col++) {
                if ($rain[$col].Position -eq $row) {
                    $char = $chars | Get-Random
                    Write-Host (Apply-PSStyle -Text $char -FG "#00FF00" -Bold) -NoNewline
                } elseif ($rain[$col].Position - 1 -eq $row) {
                    $char = $chars | Get-Random
                    Write-Host (Apply-PSStyle -Text $char -FG "#00AA00") -NoNewline
                } elseif ($rain[$col].Position - 2 -eq $row) {
                    $char = $chars | Get-Random
                    Write-Host (Apply-PSStyle -Text $char -FG "#005500") -NoNewline
                } else {
                    Write-Host " " -NoNewline
                }
                Write-Host " " -NoNewline
            }
            Write-Host
        }
        
        # Update positions
        foreach ($col in $rain.Keys) {
            $rain[$col].Position += $rain[$col].Speed
            if ($rain[$col].Position -gt 25) {
                $rain[$col].Position = -2
                $rain[$col].Speed = Get-Random -Minimum 1 -Maximum 3
            }
        }
        
        Start-Sleep -Milliseconds 100
    }
}

#endregion

#region Enhanced Border Styles

function global:Draw-NeonBorder {
    param(
        [int]$Width,
        [int]$Height,
        [string]$Color = "#FF00FF",
        [string]$Title = ""
    )
    
    $neonChars = @{
        TopLeft = "╔"
        TopRight = "╗"
        BottomLeft = "╚"
        BottomRight = "╝"
        Horizontal = "═"
        Vertical = "║"
    }
    
    # Top border with optional title
    Write-Host (Apply-PSStyle -Text $neonChars.TopLeft -FG $Color) -NoNewline
    
    if ($Title) {
        $titleLength = $Title.Length + 4
        $leftPad = [Math]::Floor(($Width - $titleLength) / 2)
        $rightPad = $Width - $titleLength - $leftPad
        
        Write-Host (Apply-PSStyle -Text ($neonChars.Horizontal * $leftPad) -FG $Color) -NoNewline
        Write-Host (Apply-PSStyle -Text "[ $Title ]" -FG $Color -Bold) -NoNewline
        Write-Host (Apply-PSStyle -Text ($neonChars.Horizontal * $rightPad) -FG $Color) -NoNewline
    } else {
        Write-Host (Apply-PSStyle -Text ($neonChars.Horizontal * $Width) -FG $Color) -NoNewline
    }
    
    Write-Host (Apply-PSStyle -Text $neonChars.TopRight -FG $Color)
    
    # Side borders
    for ($i = 0; $i -lt $Height; $i++) {
        Write-Host (Apply-PSStyle -Text $neonChars.Vertical -FG $Color) -NoNewline
        Write-Host (" " * $Width) -NoNewline
        Write-Host (Apply-PSStyle -Text $neonChars.Vertical -FG $Color)
    }
    
    # Bottom border
    Write-Host (Apply-PSStyle -Text $neonChars.BottomLeft -FG $Color) -NoNewline
    Write-Host (Apply-PSStyle -Text ($neonChars.Horizontal * $Width) -FG $Color) -NoNewline
    Write-Host (Apply-PSStyle -Text $neonChars.BottomRight -FG $Color)
}

#endregion

#region Theme Application

function global:Apply-Theme {
    param(
        [string]$ThemeName
    )
    
    if (-not $script:ThemePresets.ContainsKey($ThemeName)) {
        Write-Warning "Theme '$ThemeName' not found. Available themes: $($script:ThemePresets.Keys -join ', ')"
        return
    }
    
    $script:CurrentTheme = $script:ThemePresets[$ThemeName]
    
    # Apply theme effects
    if ($script:CurrentTheme.Effects.MatrixRain) {
        Write-Host "`nActivating Matrix mode..." -ForegroundColor Green
        Show-MatrixRain -Duration 2 -Columns 20
    }
    
    if ($script:CurrentTheme.Effects.NeonGlow) {
        Show-GlowText -Text "Theme '$ThemeName' Activated!" -GlowColor $script:CurrentTheme.Palette.AccentFG
    } else {
        Write-Success "Theme '$ThemeName' applied successfully!"
    }
    
    # Update legacy theme settings if they exist
    if ($script:Data -and $script:Data.Settings) {
        # Map new theme colors to legacy ConsoleColor names (simplified)
        $colorMap = @{
            "#FF00FF" = "Magenta"
            "#00FFFF" = "Cyan"
            "#00FF00" = "Green"
            "#FF0000" = "Red"
            "#FFFF00" = "Yellow"
            "#0000FF" = "Blue"
            "#FFFFFF" = "White"
            "#808080" = "Gray"
        }
        
        # Update legacy theme structure
        $script:Data.Settings.Theme = @{
            Header = "Cyan"
            Success = "Green"
            Warning = "Yellow"
            Error = "Red"
            Info = "Blue"
            Accent = "Magenta"
            Subtle = "Gray"
        }
        
        Save-UnifiedData
    }
}

#endregion

#region Theme Selection UI

function global:Select-Theme {
    Write-Header "Theme Gallery"
    
    Write-Host (Get-GradientText -Text "Choose your visual style:" -StartColor "#FF00FF" -EndColor "#00FFFF" -Bold)
    Write-Host
    
    $themes = @()
    foreach ($themeName in $script:ThemePresets.Keys) {
        $theme = $script:ThemePresets[$themeName]
        $themes += @{
            Name = $themeName
            Preview = {
                Draw-NeonBorder -Width 40 -Height 3 -Color $theme.Palette.AccentFG -Title $theme.Name
                [Console]::SetCursorPosition(2, [Console]::CursorTop - 3)
                Write-Host $theme.Description
                [Console]::SetCursorPosition(2, [Console]::CursorTop + 1)
                Write-Host "Primary: " -NoNewline
                Write-Host "████" -ForegroundColor White -BackgroundColor Black -NoNewline
                Write-Host " Accent: " -NoNewline
                Write-Host "████" -ForegroundColor White -BackgroundColor Black
                [Console]::SetCursorPosition(0, [Console]::CursorTop + 1)
            }
        }
    }
    
    for ($i = 0; $i -lt $themes.Count; $i++) {
        Write-Host "`n[$($i + 1)] " -NoNewline -ForegroundColor Yellow
        & $themes[$i].Preview
    }
    
    Write-Host "`n[C] Create Custom Theme"
    Write-Host "[R] Reset to Default"
    Write-Host "[B] Back to Settings"
    
    $choice = Read-Host "`nSelect theme"
    
    if ($choice -match '^\d+$') {
        $index = [int]$choice - 1
        if ($index -ge 0 -and $index -lt $themes.Count) {
            Apply-Theme -ThemeName $themes[$index].Name
        }
    } elseif ($choice -eq 'C') {
        Create-CustomTheme
    } elseif ($choice -eq 'R') {
        $script:CurrentTheme = $script:DefaultTheme
        Write-Success "Reset to default theme"
    }
}

#endregion

#region Status Badges

function global:Get-StatusBadge {
    param(
        [string]$Status,
        [switch]$Animated
    )
    
    $badges = @{
        "Active" = @{ Text = "● ACTIVE"; Color = "#00FF00"; Blink = $true }
        "Paused" = @{ Text = "‖ PAUSED"; Color = "#FFFF00"; Blink = $false }
        "Completed" = @{ Text = "✓ DONE"; Color = "#808080"; Blink = $false }
        "Overdue" = @{ Text = "⚠ OVERDUE"; Color = "#FF0000"; Blink = $true }
        "InProgress" = @{ Text = "▶ RUNNING"; Color = "#00BFFF"; Blink = $true }
        "Scheduled" = @{ Text = "◷ SCHEDULED"; Color = "#B967FF"; Blink = $false }
    }
    
    if ($badges.ContainsKey($Status)) {
        $badge = $badges[$Status]
        if ($Animated -and $badge.Blink) {
            # Blinking effect
            return "`e[5m$(Apply-PSStyle -Text $badge.Text -FG $badge.Color -Bold)`e[25m"
        } else {
            return Apply-PSStyle -Text $badge.Text -FG $badge.Color -Bold
        }
    }
    
    return $Status
}

#endregion

#region ASCII Art Headers

function global:Show-AsciiLogo {
    param(
        [string]$Style = "3D"
    )
    
    $logos = @{
        "3D" = @"
    ╔═╗╦═╗╔═╗╔╦╗╦ ╦╔═╗╔╦╗╦╦  ╦╦╔╦╗╦ ╦
    ╠═╝╠╦╝║ ║ ║║║ ║║   ║ ║╚╗╔╝║ ║ ╚╦╝
    ╩  ╩╚═╚═╝═╩╝╚═╝╚═╝ ╩ ╩ ╚╝ ╩ ╩  ╩ 
"@
        "Fire" = @"
     (  (                    )   (      )  
     )\))(   '   (       ( /(   )\ ) ( /(  
    ((_)()\ )  ( )\  (   )\()) (()/(  )\()) 
    _(())\_)() )((_) )\ (_))/   /(_))(_))/  
    \ \((_)/ /((_)_ ((_)| |_   (_))  | |_   
     \ \/\/ / / _` |(_-<|  _|  / -_) |  _|  
      \_/\_/  \__,_|/__/ \__|  \___|  \__|  
"@
        "Digital" = @"
    01110000 01110010 01101111 01100100
    01110101 01100011 01110100 01101001
    01110110 01101001 01110100 01111001
"@
    }
    
    if ($logos.ContainsKey($Style)) {
        $lines = $logos[$Style] -split "`n"
        foreach ($line in $lines) {
            Write-Host (Get-GradientText -Text $line -StartColor "#FF00FF" -EndColor "#00FFFF")
        }
    }
}

#endregion