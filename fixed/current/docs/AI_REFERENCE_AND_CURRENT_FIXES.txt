Of course. Here is the summary of the implementation status and the new set of documentation written specifically for an AI to understand and work with this framework.

### Part 1: Implementation Status Summary

This summary compares the desired state (from `ADDITIONAL-FIXES-NEEDED.md` and `TUI-FRAMEWORK-GUIDE.md`) with the current implemented state in the provided code files.

---

#### **Critical Issues**

1.  **Memory Leak in Event System**
    *   **Status:** ✅ **RESOLVED**
    *   **Current State:** The `event-system.txt` module includes `Remove-ComponentEventHandlers`, and `tui-framework.txt` includes a `Remove-TuiComponent` function that correctly calls it, ensuring event handlers are garbage collected when a component is destroyed.
    *   **Desired State:** Event handlers are cleaned up when components are destroyed.
    *   **Path to Desired State:** The implemented code in `event-system.txt` and `tui-framework.txt` achieves this.

2.  **Focus System Failure**
    *   **Status:** ✅ **RESOLVED**
    *   **Current State:** `tui-engine-v2.txt` contains a robust focus management system (`Set-ComponentFocus`, `Get-NextFocusableComponent`, `Handle-TabNavigation`). Components in `advanced-input-components.txt` and `tui-components.txt` correctly implement `IsFocusable` and render visual focus indicators (e.g., changed border color, cursor).
    *   **Desired State:** A working, predictable focus system with visual indicators.
    *   **Path to Desired State:** The code in `tui-engine-v2.txt` achieves this.

3.  **Circular Reference Memory Leak**
    *   **Status:** ✅ **RESOLVED**
    *   **Current State:** The `Remove-TuiComponent` function in `tui-framework.txt` explicitly sets parent-child references to `$null`, breaking the circular dependency and allowing the garbage collector to function.
    *   **Desired State:** Parent-child references do not prevent garbage collection.
    *   **Path to Desired State:** The implemented code in `tui-framework.txt` achieves this.

#### **High Priority Issues**

4.  **Input Buffer Overflow**
    *   **Status:** ✅ **RESOLVED**
    *   **Current State:** The `Initialize-InputThread` function in `tui-engine-v2.txt` now checks if the input queue size is less than 100 before adding a new key, preventing uncontrolled queue growth.
    *   **Desired State:** The input queue does not grow indefinitely.
    *   **Path to Desired State:** The implemented code in `tui-engine-v2.txt` achieves this.

5.  **Unicode Rendering Breaks Alignment**
    *   **Status:** ❌ **UNRESOLVED**
    *   **Current State:** `Write-BufferString` in `tui-engine-v2.txt` increments the X-coordinate by 1 for every character, regardless of its display width.
    *   **Desired State:** The rendering engine must account for double-width characters to maintain UI alignment.
    *   **Path to Desired State:** The `Write-BufferString` function in `tui-engine-v2.txt` must be replaced to calculate character widths.

        ```powershell
        # In tui-engine-v2.txt, replace the existing Write-BufferString
        function global:Write-BufferString {
            param(
                [int]$X, 
                [int]$Y, 
                [string]$Text, 
                [ConsoleColor]$ForegroundColor = [ConsoleColor]::White, 
                [ConsoleColor]$BackgroundColor = [ConsoleColor]::Black
            )
            if ($Y -lt 0 -or $Y -ge $script:TuiState.BufferHeight) { return }
            if ([string]::IsNullOrEmpty($Text)) { return }
            
            $currentX = $X
            foreach ($char in $Text.ToCharArray()) {
                if ($currentX -ge $script:TuiState.BufferWidth) { break }

                if ($currentX -ge 0) {
                    $script:TuiState.BackBuffer[$Y, $currentX] = @{ 
                        Char = $char
                        FG = $ForegroundColor
                        BG = $BackgroundColor 
                    }
                }
                
                # Pragmatic check for CJK/wide characters. A full implementation is library-dependent.
                if ($char -match '[\u1100-\u11FF\u2E80-\uA4CF\uAC00-\uD7A3\uF900-\uFAFF\uFE30-\uFE4F\uFF00-\uFFEF]') {
                    $currentX += 2
                } else {
                    $currentX++
                }
            }
        }
        ```

6.  **No Clipboard Support**
    *   **Status:** ❌ **UNRESOLVED**
    *   **Current State:** Text input components do not handle `Ctrl+V` or other clipboard-related keyboard shortcuts.
    *   **Desired State:** Users can paste text into input fields.
    *   **Path to Desired State:** Implement clipboard interaction within the `HandleInput` methods of text-based components. This is platform-dependent (`Get-Clipboard` on Windows).

7.  **Background Jobs Not Disposed**
    *   **Status:** ✅ **RESOLVED**
    *   **Current State:** `tui-framework.txt` provides `Invoke-TuiAsync` which tracks jobs and `Stop-AllTuiAsyncJobs` which is called during engine cleanup.
    *   **Desired State:** Asynchronous jobs are tracked and properly terminated on application exit.
    *   **Path to Desired State:** The implemented code in `tui-framework.txt` and `tui-engine-v2.txt` achieves this.

#### **Architectural Conflicts and Inconsistencies**

*   **Status:** ❌ **UNRESOLVED**
*   **Current State:** The framework suffers from significant internal contradictions:
    1.  **Dual Component Models:** A declarative, definition-based model (`Create-TuiScreen` in the docs) conflicts with the implemented programmatic, stateful component model (`New-TuiCalendarPicker`).
    2.  **Duplicate Components:** `New-TuiDialog` exists in both `tui-components.txt` and `dialog-system.txt`.
    3.  **Inconsistent APIs:** Component creation and property assignment are handled differently across component sets.
    4.  **State Management Underutilization:** The powerful `Create-TuiState` is available but unused by existing screens, which manage state in simple hashtables.
*   **Desired State:** A single, consistent, and well-defined architecture for creating components, managing state, and building screens.
*   **Path to Desired State:** A firm decision must be made on the canonical architecture. The programmatic, stateful component model (`New-Tui...`) is more powerful and should be adopted as the standard. The following documents establish this as the new standard.

---

### Part 2 & 3: AI-Centric Documentation

This documentation suite replaces all existing `.md` files and is structured for consumption by a Large Language Model. It establishes canonical patterns and resolves the architectural conflicts noted above.

---
### File: `AI_SYSTEM_OVERVIEW.md`
---

# TUI System Overview for AI Analysis

## Core Principles & Canonical Architecture

1.  **Component Model:** The framework uses a **programmatic, stateful component model**. Components are created via `New-Tui...` factory functions (e.g., `New-TuiButton`). The declarative, definition-based model (`Create-TuiScreen -Definition`) is deprecated and should not be used for new development.
2.  **State Management:** State is managed at the **screen level** within a `$screen.State` hashtable. For reactive state, the `Create-TuiState` utility from `tui-framework.psm1` is available but not integrated by default. Components are stateful and manage their own UI-specific state (e.g., `SelectedIndex`, `SearchText`).
3.  **Rendering:** The engine uses a double-buffer system (`FrontBuffer`, `BackBuffer`) with an optimized render loop that only writes changed cells to the console. Rendering is triggered by `Request-TuiRefresh`.
4.  **Input Handling:** Input is captured on a dedicated thread and placed in a concurrent queue. The main loop dequeues input and dispatches it. Dialogs receive input first, followed by the focused component, and finally the active screen.
5.  **Module Dependencies:** Load order is critical. The canonical load order is defined in `main.ps1` and must be respected: `event-system` -> `data-manager` -> `theme-manager` -> `tui-engine-v2` -> `dialog-system` -> `components` -> `tui-framework`.

## System Architecture & Data Flow

```mermaid
graph TD
    subgraph Main Thread
        A[Start-TuiLoop] --> B{Process Input?};
        B --> C[Process-TuiInput];
        C --> D{Key Handled?};
        D -- Yes --> E[Request-TuiRefresh];
        E --> F{Render?};
        B -- No --> F;
        F -- Yes --> G[Render-Frame];
        G --> H[Render Screen & Components];
        H --> I[Render Dialogs];
        I --> J[Render-BufferOptimized];
        J --> A;
    end

    subgraph Input Thread (Background)
        K[Console.ReadKey] --> L[InputQueue.Enqueue];
    end

    subgraph Input Handling Logic
        C --> M{Dialog Active?};
        M -- Yes --> N[Handle-DialogInput];
        M -- No --> O{Focused Component?};
        O -- Yes --> P[Component.HandleInput];
        O -- No --> Q[Screen.HandleInput];
        N --> D;
        P --> D;
        Q --> D;
    end
    
    subgraph State & Render Flow
        P --> R[Component State Mutation];
        R --> E;
        Q --> S[Screen State Mutation];
        S --> E;
    end

    C -.-> L;
```

## File & Module Structure

*   `main.ps1`: Application entry point. Orchestrates module loading and starts the TUI loop.
*   `modules/`: Core systems.
    *   `event-system.psm1`: Global publish/subscribe event bus.
    *   `data-manager.psm1`: Data persistence (load/save JSON), business logic for data models.
    *   `theme-manager.psm1`: Color and theme management. `Get-ThemeColor` is the primary interface.
    *   `tui-engine-v2.psm1`: **Heart of the TUI.** Manages the render loop, buffers, input thread, and focus system.
    *   `dialog-system.psm1`: **Canonical dialog implementation.** Provides `Show-ConfirmDialog`, `Show-InputDialog`, etc.
    *   `tui-framework.psm1`: High-level utilities and factories. `Create-TuiComponent` (deprecated), `Create-TuiForm`, `Invoke-TuiAsync`.
*   `components/`: UI component definitions.
    *   `tui-components.psm1`: Basic components (`Button`, `TextBox`, `Label`, etc.).
    *   `advanced-input-components.psm1`: Complex input controls (`CalendarPicker`, `SearchableDropdown`).
    *   `advanced-data-components.psm1`: Complex data controls (`DataTable`, `TreeView`).
*   `screens/`: Application-specific screens. Each file exports a `Get-ScreenNameScreen` function.

---
### File: `AI_API_REFERENCE.md`
---

# TUI API Reference

This document provides a definitive list of functions and component properties based on the implemented code.

## Engine API (`tui-engine-v2.psm1`)

*   `Initialize-TuiEngine`: Sets up buffers and starts the input thread. Must be called first.
*   `Start-TuiLoop`: Begins the main application render and input loop.
*   `Stop-TuiLoop`: Signals the main loop to terminate. (Use `return "Quit"` from a screen's `HandleInput` instead).
*   `Request-TuiRefresh`: Flags the screen as "dirty," triggering a re-render on the next frame.
*   `Push-Screen -Screen [hashtable]`: Pushes a screen onto the screen stack, making it active.
*   `Pop-Screen`: Removes the current screen and returns to the previous one.
*   `Write-BufferString -X, -Y, -Text, -ForegroundColor, -BackgroundColor`: Writes a string to the back buffer.
*   `Write-BufferBox -X, -Y, -Width, -Height, -BorderColor, -Title`: Writes a bordered box to the back buffer.
*   `Set-ComponentFocus -Component [hashtable]`: Sets the globally focused component. (Internal use, prefer screen-level focus management).

## Component Factory Functions

All components are created via `New-Tui<ComponentName> -Props [hashtable]`.

| Function | Source File | Description |
|---|---|---|
| `New-TuiLabel` | `tui-components.psm1` | Static text display. |
| `New-TuiButton`| `tui-components.psm1` | Clickable button. |
| `New-TuiTextBox`| `tui-components.psm1` | Single-line text input. |
| `New-TuiCheckBox`| `tui-components.psm1` | Boolean check box. |
| `New-TuiDropdown`| `tui-components.psm1` | Simple dropdown list. |
| `New-TuiProgressBar`| `tui-components.psm1`| Visual progress indicator. |
| `New-TuiTextArea`| `tui-components.psm1` | Multi-line text input. |
| `New-TuiDatePicker`| `tui-components.psm1`| Simple date input (no calendar grid). |
| `New-TuiTimePicker`| `tui-components.psm1`| Simple time input. |
| `New-TuiTable`| `tui-components.psm1`| Basic, non-filterable data table. |
| `New-TuiChart`| `tui-components.psm1`| Simple bar chart or sparkline. |
| `New-TuiCalendarPicker` | `advanced-input-components.psm1` | **Advanced** date/time picker with a grid UI. |
| `New-TuiSearchableDropdown` | `advanced-input-components.psm1` | **Advanced** dropdown with filtering. |
| `New-TuiMultiSelect` | `advanced-input-components.psm1` | List with multiple item selection. |
| `New-TuiNumberInput` | `advanced-input-components.psm1` | Input field for numbers with validation and spinners. |
| `New-TuiSlider` | `advanced-input-components.psm1` | Horizontal slider for numeric values. |
| `New-TuiDataTable` | `advanced-data-components.psm1` | **Advanced** data table with sorting, filtering, and pagination. |
| `New-TuiTreeView` | `advanced-data-components.psm1` | Hierarchical tree view. |

## Component Properties (`$Props` Hashtable)

### Common Properties

*   `X`, `Y`, `Width`, `Height`: Position and dimensions.
*   `IsFocusable`: `[bool]` - Indicates if the component can receive focus. Default `$false`.
*   `Name`: `[string]` - Unique identifier for the component within its parent screen.
*   `Visible`: `[bool]` - Controls if the component is rendered. Default `$true`.

### Event Handlers (Scriptblocks)

*   `OnClick`: For buttons. Executed on Enter/Space.
*   `OnChange -NewValue ...`: For inputs. Executed when the value changes.
*   `OnSelect`: For lists/pickers. Executed on final selection (e.g., Enter).
*   `OnSubmit`: For forms/dialogs. Executed on submission.
*   `OnRowSelect`: For tables. Executed when a row is selected.

### Specific Component Properties

*   **TuiButton**: `Text`
*   **TuiTextBox**: `Text`, `Placeholder`, `CursorPosition`, `TextProp`, `CursorProp` (for forms)
*   **TuiCalendarPicker**: `Value` (DateTime), `Mode` ('Date', 'DateTime', 'Time')
*   **TuiSearchableDropdown**: `Options` (array of hashtables with `Display` and `Value` keys), `Value`, `Placeholder`, `AllowCustomValue`
*   **TuiDataTable**: `Data` (array of objects), `Columns` (array of column definitions), `MultiSelect`, `AllowSort`, `AllowFilter`
*   **TuiNumberInput**: `Value`, `Min`, `Max`, `Step`, `DecimalPlaces`
*   **TuiTreeView**: `RootNode` (hashtable representing the root of the tree)

## Dialog System API (`dialog-system.psm1`)

*   `Show-ConfirmDialog -Title, -Message, -OnConfirm, -OnCancel`
*   `Show-AlertDialog -Title, -Message`
*   `Show-InputDialog -Title, -Prompt, -DefaultValue, -OnSubmit, -OnCancel`
*   `Show-ProgressDialog -Title, -Message, -PercentComplete`
*   `Show-ListDialog -Title, -Prompt, -Items, -OnSelect, -OnCancel, -AllowMultiple`
*   `Close-TuiDialog`

---
### File: `AI_COMPONENT_GUIDE.md`
---

# AI Component Development Guide

## Canonical Component Model

The authoritative component model is the **programmatic, stateful factory pattern**. Each component is a self-contained hashtable created by a `New-Tui...` function. It encapsulates its own state and logic.

### Component Hashtable Structure

A component is a PowerShell hashtable with a standardized structure.

```powershell
$component = @{
    # METADATA (required)
    Type = "MyComponent"
    IsFocusable = $true

    # PROPERTIES (defined in Props hashtable on creation)
    X = 0
    Y = 0
    Width = 30
    Height = 5
    # ...other custom properties...

    # INTERNAL STATE (managed by the component itself)
    InternalValue = ""
    SelectedIndex = 0
    # ...other internal state variables...

    # METHODS (scriptblocks)
    Render = {
        param($self)
        # Logic to draw the component to the back buffer using Write-Buffer*.
        # Use $self.IsFocused to alter appearance when focused.
    }
    HandleInput = {
        param($self, $Key)
        # Logic to process a ConsoleKeyInfo object.
        # Must return $true if the key was handled, otherwise $false.
        # Should call Request-TuiRefresh if the UI needs to be updated.
    }
    OnChange = {
        # Scriptblock provided by the consumer of the component.
        # Called when the component's value changes.
    }
    # ...other event handlers like OnSelect, OnClick...
}
```

### Component Lifecycle

1.  **Creation**: A screen calls `New-TuiMyComponent -Props @{...}`. The function returns a fully-formed hashtable.
2.  **Rendering**: On every frame where the screen is dirty, the engine calls the screen's `Render` method, which in turn calls the component's `Render` method. The component reads its own properties and state to draw itself.
3.  **Input**: When the component is focused and input occurs, the engine calls the component's `HandleInput` method.
4.  **State Mutation**: `HandleInput` mutates the component's internal state (e.g., `SelectedIndex++`).
5.  **Refresh Request**: After mutation, `HandleInput` calls `Request-TuiRefresh` to signal that the screen needs to be redrawn.
6.  **Event Firing**: If a meaningful change occurs (e.g., selection confirmed), the component invokes its consumer-provided event handlers (e.g., `& $self.OnChange -NewValue ...`).

### Boilerplate for a New Component

Use this template to create a new, compliant component.

```powershell
function global:New-TuiMyCustomComponent {
    param([hashtable]$Props = @{})
    
    $component = @{
        # --- Metadata ---
        Type = "MyCustomComponent"
        IsFocusable = $true
        
        # --- Properties (from Props) ---
        X = $Props.X ?? 0
        Y = $Props.Y ?? 0
        Width = $Props.Width ?? 20
        Height = $Props.Height ?? 3
        Value = $Props.Value ?? "Default"
        
        # --- Internal State ---
        # (Add any private state variables here)
        
        # --- Event Handlers (from Props) ---
        OnChange = $Props.OnChange
        
        # --- Methods ---
        Render = {
            param($self)
            
            $borderColor = if ($self.IsFocused) { 
                Get-ThemeColor "Accent"
            } else { 
                Get-ThemeColor "Border"
            }
            
            Write-BufferBox -X $self.X -Y $self.Y -Width $self.Width -Height $self.Height `
                -BorderColor $borderColor -Title " $($self.Type) "
            
            # Render component's value
            Write-BufferString -X ($self.X + 2) -Y ($self.Y + 1) -Text $self.Value
        }
        
        HandleInput = {
            param($self, $Key)
            
            $handled = $false
            switch ($Key.Key) {
                # Handle specific keys here
                ([ConsoleKey]::Enter) {
                    # Example: Change value and fire event
                    $oldValue = $self.Value
                    $self.Value = "Updated!"
                    
                    if ($self.OnChange -and $self.Value -ne $oldValue) {
                        & $self.OnChange -NewValue $self.Value
                    }
                    
                    Request-TuiRefresh
                    $handled = $true
                }
            }
            
            return $handled
        }
    }
    
    return $component
}
```

---
### File: `AI_DEVELOPMENT_PATTERNS.md`
---

# TUI Development Patterns

This guide provides canonical patterns for common development tasks.

## Creating a New Screen

A screen is a self-contained hashtable that manages a collection of components and orchestrates their state and interactions.

```powershell
# In a new file, e.g., screens/my-new-screen.psm1

function global:Get-MyNewScreen {
    $screen = @{
        Name = "MyNewScreen"
        
        # 1. State: Central data model for the screen
        State = @{
            # Screen-specific data
            Username = ""
            Counter = 0
        }
        
        # 2. Components: Storage for instantiated component objects
        Components = @{}

        # 3. Init: One-time setup
        Init = {
            param($self)
            
            # Instantiate all components and store them
            $self.Components.nameInput = New-TuiTextBox -Props @{
                X = 10; Y = 5; Width = 30
                Placeholder = "Enter name..."
                OnChange = { 
                    param($self_component, $Key)
                    # This handler is for the component, not the screen
                    # Update screen state from component change
                    $self.State.Username = $self_component.Text 
                    # No need for Request-TuiRefresh here, input loop handles it
                }
            }

            $self.Components.submitButton = New-TuiButton -Props @{
                X = 10; Y = 9; Width = 15; Text = "Submit"
                OnClick = {
                    Show-AlertDialog -Title "Submitted" -Message "Hello, $($self.State.Username)!"
                }
            }
            # ... add more components
        }

        # 4. Render: Draw the screen and its components
        Render = {
            param($self)
            
            # Draw screen-level elements (title, borders)
            Write-BufferString -X 2 -Y 1 -Text "My New Screen"
            
            # Render all managed components
            foreach ($component in $self.Components.Values) {
                
                # Check focus and render accordingly
                $component.IsFocused = ($self.Components.Values | Where-Object { $_.IsFocused }).Name -eq $component.Name
                & $component.Render -self $component
            }

            # Update components with data from state
            $self.Components.nameInput.Text = $self.State.Username
        }

        # 5. HandleInput: Global input handling for the screen
        HandleInput = {
            param($self, $Key)
            
            # Screen-level shortcuts
            if ($Key.Key -eq [ConsoleKey]::Escape) {
                return "Back" # Signal to engine to pop screen
            }
            
            # Tab navigation (example, usually handled by engine)
            # This is where you would manage which component in $self.Components is focused.

            # Delegate to focused component
            $focusedComponent = $self.Components.Values | Where-Object { $_.IsFocused } | Select-Object -First 1
            if ($focusedComponent) {
                if (& $focusedComponent.HandleInput -self $focusedComponent -Key $Key) {
                    Request-TuiRefresh
                    return $true
                }
            }

            return $false
        }
        
        # 6. Lifecycle Hooks (Optional)
        OnExit = { param($self) # Cleanup }
        OnResume = { param($self) # Refresh data when returning }
    }
    
    return $screen
}

Export-ModuleMember -Function Get-MyNewScreen
```

## Managing State

State is managed within a screen's `$screen.State` hashtable. Components read from this state during their `Render` phase and update it via their event handlers.

**Pattern:**

1.  **Define State:** In the screen definition, initialize all state properties.
    ```powershell
    $screen = @{
        State = @{ FormValue = "" }
        ...
    }
    ```
2.  **Bind Component to State:** In the component's `OnChange` handler, update the screen's state.
    ```powershell
    $props = @{
        OnChange = {
            param($self_component) # $self_component is the component itself
            $screen.State.FormValue = $self_component.Value
        }
    }
    ```
3.  **Reflect State in UI:** In the screen's `Render` method, update the component's property from the state before rendering. This ensures the UI is always in sync with the state.
    ```powershell
    Render = {
        param($self) # $self is the screen
        $self.Components.myInput.Value = $self.State.FormValue
        & $self.Components.myInput.Render -self $self.Components.myInput
    }
    ```

## Asynchronous Operations

Use `Invoke-TuiAsync` for any long-running task to avoid freezing the UI.

```powershell
# In a screen's Init or a button's OnClick handler

# Show a loading indicator
Show-ProgressDialog -Title "Loading" -Message "Fetching data..."

Invoke-TuiAsync -ScriptBlock {
    # This runs in the background
    Start-Sleep -Seconds 3
    return Get-Process
} -OnComplete {
    param($data)
    # This runs on the main thread when complete
    Close-TuiDialog
    $screen.State.Processes = $data
    Request-TuiRefresh
} -OnError {
    param($error)
    # This runs on the main thread on failure
    Close-TuiDialog
    Show-AlertDialog -Title "Error" -Message "Failed to load data: $error"
}
```
