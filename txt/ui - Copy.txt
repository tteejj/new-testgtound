# UI Components Module

# Tables, menus, borders, and display functions

 

#region Table Formatting

function global:Format-TableUnicode {

    param(

        [Parameter(ValueFromPipeline)]

        [object[]]$InputData,

       

        [hashtable[]]$Columns,

       

        [string]$BorderStyle = "Single",

        [string]$Title = "",

        [switch]$NoHeader,

        [switch]$Wrap,

        [int]$MaxWidth = 0,

        [hashtable]$RowHighlightRules = @{},

        [scriptblock]$RowColorCondition

    )

   

    begin {

        $allData = @()

        $border = Get-BorderStyleChars -Style $BorderStyle

        if (-not $border) {

            $border = @{

                TopLeft = "+"; TopRight = "+"; BottomLeft = "+"; BottomRight = "+"

                Horizontal = "-"; Vertical = "|"; Cross = "+"; TLeft = "+"; TRight = "+"

                TTop = "+"; TBottom = "+"

            }

        }

        if ($MaxWidth -eq 0) {

            try { $MaxWidth = $Host.UI.RawUI.WindowSize.Width - 2 }

            catch { $MaxWidth = 80 }

        }

    }

   

    process {

        if ($InputData) {

            $allData += $InputData

        }

    }

   

    end {

        if ($allData.Count -eq 0) {

            Write-Host "No data to display." -ForegroundColor Gray

            return

        }

       

        if (-not $Columns) {

            $props = @()

            if ($allData[0].PSObject -and $allData[0].PSObject.Properties) {

                $props = $allData[0].PSObject.Properties | Where-Object { $_.MemberType -eq 'NoteProperty' }

            }

            $Columns = $props | ForEach-Object {

                @{ Name = $_.Name; Title = $_.Name; Width = 0 }

            }

        }

       

        if (-not $Columns -or $Columns.Count -eq 0) {

            Write-Host "No columns to display." -ForegroundColor Gray

            return

        }

       

        # Calculate initial column widths based on content

        foreach ($col in $Columns) {

            if ($null -eq $col.Width -or $col.Width -eq 0) {

                $maxLen = if ($col.Title) { $col.Title.Length } else { if ($col.Name) { $col.Name.Length } else { 5 } }

                foreach ($item in $allData) {

                    $value = Get-PropertyValue $item $col.Name

                    $len = if ($value) { $value.ToString().Length } else { 0 }

                    if ($len -gt $maxLen) { $maxLen = $len }

                }

                $col.Width = [Math]::Min($maxLen + 2, ($MaxWidth / 2))

                if ($col.Title -and $col.Width -lt ($col.Title.Length + 2)) {$col.Width = $col.Title.Length + 2}

                if ($col.Width -lt 5) { $col.Width = 5 }

            }

        }

       

        # Adjust column widths if total exceeds MaxWidth

        $totalCurrentWidth = ($Columns | Measure-Object -Property Width -Sum).Sum + ($Columns.Count + 1)

        if ($totalCurrentWidth -gt $MaxWidth) {

            $reductionFactor = ($MaxWidth - ($Columns.Count + 1)) / ($Columns | Measure-Object -Property Width -Sum).Sum

            if($reductionFactor -lt 1 -and $reductionFactor -gt 0){

                foreach ($col in $Columns) {

                    $newWidth = [Math]::Max(5, [int]($col.Width * $reductionFactor))

                    $col.Width = $newWidth

                }

            }

            $totalCurrentWidth = ($Columns | Measure-Object -Property Width -Sum).Sum + ($Columns.Count + 1)

        }

       

        # Draw top border

        Write-Host $border.TopLeft -NoNewline

        for ($i = 0; $i -lt $Columns.Count; $i++) {

            Write-Host ($border.Horizontal * $Columns[$i].Width) -NoNewline

            if ($i -lt $Columns.Count - 1) { Write-Host $border.TTop -NoNewline }

        }

        Write-Host $border.TopRight

       

        # Draw title if provided

        if ($Title) {

            $titleAreaWidth = $totalCurrentWidth - 2

            Write-Host $border.Vertical -NoNewline

            $titlePadded = " $Title ".PadRight($titleAreaWidth)

            if ($titlePadded.Length -gt $titleAreaWidth) {

                $titlePadded = $titlePadded.Substring(0, [Math]::Max(0, $titleAreaWidth -1)) + "…"

            }

            Write-Host $titlePadded -NoNewline -ForegroundColor Cyan

            Write-Host $border.Vertical

           

            Write-Host $border.TLeft -NoNewline

            for ($i = 0; $i -lt $Columns.Count; $i++) {

                Write-Host ($border.Horizontal * $Columns[$i].Width) -NoNewline

                if ($i -lt $Columns.Count - 1) { Write-Host $border.Cross -NoNewline }

            }

            Write-Host $border.TRight

        }

       

        # Draw header

        if (-not $NoHeader) {

            Write-Host $border.Vertical -NoNewline

            foreach ($col in $Columns) {

                $alignHeader = if ($col.AlignHeader) { $col.AlignHeader } else { "Center" }

                $headerText = Format-TableCell -Text $col.Title -Width $col.Width -Align $alignHeader

                Write-Host $headerText -NoNewline -ForegroundColor Cyan

                Write-Host $border.Vertical -NoNewline

            }

            Write-Host

           

            Write-Host $border.TLeft -NoNewline

            for ($i = 0; $i -lt $Columns.Count; $i++) {

                Write-Host ($border.Horizontal * $Columns[$i].Width) -NoNewline

                if ($i -lt $Columns.Count - 1) { Write-Host $border.Cross -NoNewline }

            }

            Write-Host $border.TRight

        }

       

        # Draw data rows

        $rowIndex = 0

        foreach ($item in $allData) {

            Write-Host $border.Vertical -NoNewline

           

            $rowColor = "White"

            if ($RowColorCondition -and (& $RowColorCondition $item)) {

                 $colorResult = & $RowColorCondition $item

                 if($colorResult -is [hashtable] -and $colorResult.FG){

                     $rowColor = if ($colorResult.FG -match '^(Black|DarkBlue|DarkGreen|DarkCyan|DarkRed|DarkMagenta|DarkYellow|Gray|DarkGray|Blue|Green|Cyan|Red|Magenta|Yellow|White)$') { $colorResult.FG } else { "White" }

                 }

                 elseif($colorResult -is [string] -and $colorResult -match '^(Black|DarkBlue|DarkGreen|DarkCyan|DarkRed|DarkMagenta|DarkYellow|Gray|DarkGray|Blue|Green|Cyan|Red|Magenta|Yellow|White)$') {

                     $rowColor = $colorResult

                 }

            } elseif ($rowIndex % 2 -eq 1 -and (-not $RowHighlightRules -or $RowHighlightRules.Count -eq 0)) {

                $rowColor = "Gray"

            }

 

            if ($RowHighlightRules) {

                foreach($ruleName in $RowHighlightRules.Keys){

                    $rule = $RowHighlightRules[$ruleName]

                    if($item | Where-Object $rule.Condition){

                        if ($rule.FG -and $rule.FG -match '^(Black|DarkBlue|DarkGreen|DarkCyan|DarkRed|DarkMagenta|DarkYellow|Gray|DarkGray|Blue|Green|Cyan|Red|Magenta|Yellow|White)$') {

                            $rowColor = $rule.FG

                        }

                        break

                    }

                }

            }

           

            foreach ($col in $Columns) {

                $value = Get-PropertyValue $item $col.Name

                $alignData = if ($col.AlignData) { $col.AlignData } else { "Left" }

                $cellText = Format-TableCell -Text $value -Width $col.Width -Align $alignData -Wrap:$Wrap

               

                Write-Host $cellText -NoNewline -ForegroundColor $rowColor

                Write-Host $border.Vertical -NoNewline

            }

            Write-Host

            $rowIndex++

        }

       

        # Draw bottom border

        Write-Host $border.BottomLeft -NoNewline

        for ($i = 0; $i -lt $Columns.Count; $i++) {

            Write-Host ($border.Horizontal * $Columns[$i].Width) -NoNewline

            if ($i -lt $Columns.Count - 1) { Write-Host $border.TBottom -NoNewline }

        }

        Write-Host $border.BottomRight

    }

}

 

 

function global:Format-TableCell {

    param(

        [string]$Text,

        [int]$Width,

        [string]$Align = "Left",

        [switch]$Wrap # If true, text wrapping would be handled here (more complex)

    )

   

    $Text = if ($null -eq $Text) { "" } else { $Text.ToString() }

 

    if ($Width -lt 1) { $Width = 1 } # Ensure minimum width

 

    # Simple truncation for now, no wrapping implemented in this version

    if ($Text.Length -gt $Width) {

        if ($Width -ge 1) { # Allow for ellipsis if space

            $Text = $Text.Substring(0, [Math]::Max(0, $Width - 1)) + "…"

        } else {

            $Text = $Text.Substring(0, [Math]::Max(0, $Width))

        }

    }

   

    # Pad with spaces. For tables, usually 1 space padding on each side is visually included in cell width.

    # This function should return the content to fit *within* the given width.

    # The calling function (Format-TableUnicode) adds border chars.

    # Let's assume $Width is the total characters for the content, including internal padding.

   

    $contentWidth = $Width - 2 # Available space for text after 1-char padding on each side

    if ($contentWidth -lt 0) {$contentWidth = 0}

 

    if ($Text.Length -gt $contentWidth) {

        if ($contentWidth -ge 1) { $Text = $Text.Substring(0, [Math]::Max(0, $contentWidth -1)) + "…" }

        else {$Text = ""} # Not enough space for even one char + ellipsis

    }

 

    $paddedText = switch ($Align.ToLower()) {

        "center" { $Text.PadLeft([int](($contentWidth + $Text.Length) / 2)).PadRight($contentWidth) }

        "right"  { $Text.PadLeft($contentWidth) }

        default  { $Text.PadRight($contentWidth) }

    }

    return " $paddedText " # Add the 1-char padding

}

 

function global:Get-PropertyValue {

    param($Object, $PropertyName)

   

    if ($null -eq $Object) { return "" }

    if ([string]::IsNullOrEmpty($PropertyName)) { return "" }

 

    if ($PropertyName -contains ".") {

        $parts = $PropertyName -split '\.'

        $current = $Object

        foreach ($part in $parts) {

            try {

                # Check if $current is a PSObject and has the property, or if it's a hashtable

                if ($current -is [psobject] -and $current.PSObject.Properties[$part]) {

                    $current = $current.$part

                } elseif ($current -is [hashtable] -and $current.ContainsKey($part)) {

                    $current = $current[$part]

                } else {

                    return "" # Property path not found

                }

                if ($null -eq $current) { return "" }

            } catch { return "" }

        }

        return if ($null -eq $current) { "" } else { $current.ToString() }

    }

   

    try {

        $value = $Object.$PropertyName # Works for PSObjects

        if ($null -eq $value -and $Object -is [hashtable] -and $Object.ContainsKey($PropertyName)) {

            $value = $Object[$PropertyName] # Works for Hashtables

        }

        if ($null -eq $value) { return "" }

        return $value.ToString()

    } catch { return "" }

}

 

#endregion

 

#region Dashboard Display

 

function global:Show-Dashboard {

#    Clear-Host

   

    $headerColor = Get-ThemeProperty "Palette.AccentFG"

    Write-Host @"

╔═══════════════════════════════════════════════════════════╗

║          UNIFIED PRODUCTIVITY SUITE v5.0                  ║

║               All-in-One Command Center                   ║

╚═══════════════════════════════════════════════════════════╝

"@ -ForegroundColor $headerColor

 

    $activeTimers = if ($script:Data.ActiveTimers) { $script:Data.ActiveTimers.Count } else { 0 }

    $activeTasks = ($script:Data.Tasks | Where-Object { (-not $_.Completed) -and ($_.IsCommand -ne $true) }).Count

    $todayHours = 0.0

    if ($script:Data.TimeEntries) {

        $todayHours = ($script:Data.TimeEntries | Where-Object { $_.Date -eq (Get-Date).ToString("yyyy-MM-dd") } | Measure-Object -Property Hours -Sum).Sum

        $todayHours = if ($todayHours) { [Math]::Round($todayHours, 2) } else { 0.0 }

    }

   

    Write-Host "`n📊 CURRENT STATUS" -ForegroundColor (Get-ThemeProperty "Palette.WarningFG")

    Write-Host ("═" * 47) -ForegroundColor (Get-ThemeProperty "Palette.SubtleFG")

    

    Write-Host "  📅 Today: " -NoNewline; Write-Host (Get-Date).ToString("dddd, MMMM dd, yyyy") -ForegroundColor (Get-ThemeProperty "Palette.PrimaryFG")

    Write-Host "  ⏱️  Today's Hours: " -NoNewline

    if ($todayHours -gt 0) { Write-Host "$todayHours" -ForegroundColor (Get-ThemeProperty "Palette.SuccessFG") }

    else { Write-Host "None logged" -ForegroundColor (Get-ThemeProperty "Palette.SubtleFG") }

   

    Write-Host "  ⏰ Active Timers: " -NoNewline

    if ($activeTimers -gt 0) {

        Write-Host "$activeTimers running" -ForegroundColor (Get-ThemeProperty "Palette.ErrorFG")

        foreach ($timer in $script:Data.ActiveTimers.GetEnumerator() | Select-Object -First 2) {

            $elapsed = (Get-Date) - [DateTime]$timer.Value.StartTime

            $project = Get-ProjectOrTemplate $timer.Value.ProjectKey

            $projectName = if($project){$project.Name}else{"Unknown"}

            Write-Host "     → $projectName $([Math]::Floor($elapsed.TotalHours)):$($elapsed.ToString('mm\:ss'))" -ForegroundColor (Get-ThemeProperty "Palette.InfoFG")

        }

        if ($script:Data.ActiveTimers.Count -gt 2) { Write-Host "     → ... and $($script:Data.ActiveTimers.Count - 2) more" -ForegroundColor (Get-ThemeProperty "Palette.SubtleFG") }

    } else { Write-Host "None" -ForegroundColor (Get-ThemeProperty "Palette.SuccessFG") }

   

    Write-Host "  ✅ Active Tasks: " -NoNewline

    if ($activeTasks -gt 0) {

        Write-Host "$activeTasks" -ForegroundColor (Get-ThemeProperty "Palette.WarningFG")

        $overdue = $script:Data.Tasks | Where-Object { (-not [string]::IsNullOrEmpty($_.DueDate)) -and ([datetime]::Parse($_.DueDate).Date -lt [datetime]::Today.Date) -and (-not $_.Completed) -and ($_.IsCommand -ne $true) }

        $dueToday = $script:Data.Tasks | Where-Object { (-not [string]::IsNullOrEmpty($_.DueDate)) -and ([datetime]::Parse($_.DueDate).Date -eq [datetime]::Today.Date) -and (-not $_.Completed) -and ($_.IsCommand -ne $true) }

        if ($overdue.Count -gt 0) { Write-Host "     ⚠️  $($overdue.Count) overdue!" -ForegroundColor (Get-ThemeProperty "Palette.ErrorFG") }

        if ($dueToday.Count -gt 0) { Write-Host "     📅 $($dueToday.Count) due today" -ForegroundColor (Get-ThemeProperty "Palette.WarningFG") }

    } else { Write-Host "None - inbox zero! 🎉" -ForegroundColor (Get-ThemeProperty "Palette.SuccessFG") }

   

    $activeProjectsCount = if ($script:Data.Projects) { ($script:Data.Projects.Values | Where-Object { $_.Status -eq "Active" }).Count } else { 0 }

    Write-Host "  📁 Active Projects: " -NoNewline; Write-Host $activeProjectsCount -ForegroundColor (Get-ThemeProperty "Palette.InfoFG")

    

    $commandCount = ($script:Data.Tasks | Where-Object { $_.IsCommand -eq $true }).Count

    if ($commandCount -gt 0) { Write-Host "  💡 Command Snippets: " -NoNewline; Write-Host $commandCount -ForegroundColor (Get-ThemeProperty "Palette.AccentFG") }

   

    Write-Host "`n📈 WEEK SUMMARY" -ForegroundColor (Get-ThemeProperty "Palette.WarningFG")

    Write-Host ("═" * 47) -ForegroundColor (Get-ThemeProperty "Palette.SubtleFG")

    

    $weekStart = Get-WeekStart

    $weekHours = 0.0

    if ($script:Data.TimeEntries) {

        $weekEntries = $script:Data.TimeEntries | Where-Object { (-not [string]::IsNullOrEmpty($_.Date)) -and ([DateTime]::Parse($_.Date).Date -ge $weekStart.Date) -and ([DateTime]::Parse($_.Date).Date -lt $weekStart.AddDays(7).Date) }

        $weekHours = ($weekEntries | Measure-Object -Property Hours -Sum).Sum

        $weekHours = if ($weekHours) { [Math]::Round($weekHours, 2) } else { 0.0 }

    }

    $targetWeeklyHours = $script:Data.Settings.HoursPerDay * $script:Data.Settings.DaysPerWeek

    Write-Host "  Week of: $($weekStart.ToString('MMM dd, yyyy'))"

    Write-Host "  Total Hours: $weekHours / $targetWeeklyHours target"

   

    $weekProgress = if ($targetWeeklyHours -gt 0) { [Math]::Min(100, [Math]::Round(($weekHours / $targetWeeklyHours) * 100, 0)) } else { 0 }

    $progressBarWidth = 20 # Define width for progress bar

    $filledBlocks = [Math]::Floor($progressBarWidth * $weekProgress / 100)

    $emptyBlocks = $progressBarWidth - $filledBlocks

    $progressBar = "[" + ("█" * $filledBlocks) + ("░" * $emptyBlocks) + "]"

    $progressColor = if ($weekProgress -ge 80) { (Get-ThemeProperty "Palette.SuccessFG") }

                     elseif ($weekProgress -ge 50) { (Get-ThemeProperty "Palette.WarningFG") }

                     else { (Get-ThemeProperty "Palette.ErrorFG") }

    Write-Host "  Progress: $(Apply-PSStyle -Text "$progressBar $weekProgress%" -FG $progressColor)"

   

    Write-Host "`n⚡ QUICK ACTIONS" -ForegroundColor (Get-ThemeProperty "Palette.WarningFG")

    Write-Host ("═" * 47) -ForegroundColor (Get-ThemeProperty "Palette.SubtleFG")

    Write-Host "  [M] Manual Time Entry    [S] Start Timer      [+key] Quick Actions Menu"

    Write-Host "  [A] Add Task            [V] View Active Timers"

    Write-Host "  [T] Today's View        [W] Week Report" # Changed T from Tasks to Today's View

    Write-Host "  [P] Project Details     [H] Help"

   

    Write-Host "`n🔧 FULL MENU OPTIONS" -ForegroundColor (Get-ThemeProperty "Palette.WarningFG")

    Write-Host ("═" * 47) -ForegroundColor (Get-ThemeProperty "Palette.SubtleFG")

    Write-Host "  [1] Time Management     [4] Projects & Clients"

    Write-Host "  [2] Task Management     [5] Tools & Utilities"

    Write-Host "  [3] Reports & Analytics [6] Settings & Config"

    Write-Host "`n  [Q] Quit"

}

 

#endregion

 

#region Calendar Display

 

function global:Show-Calendar {

    param(

        [DateTime]$MonthToDisplay = (Get-Date),

        [DateTime[]]$DatesToHighlight = @() # Not fully used yet

    )

   

    Write-Header "Calendar - $($MonthToDisplay.ToString('MMMM yyyy'))"

    

    $firstDayOfMonth = Get-Date $MonthToDisplay -Day 1

    $lastDayOfMonth = $firstDayOfMonth.AddMonths(1).AddDays(-1)

    $startOffset = [int]$firstDayOfMonth.DayOfWeek

    

    Write-Host "  Sun  Mon  Tue  Wed  Thu  Fri  Sat" -ForegroundColor (Get-ThemeProperty "Palette.InfoFG")

    Write-Host "  " + ("─" * 35) -ForegroundColor (Get-ThemeProperty "Palette.SubtleFG")

    

    $tasksByDate = @{}

    if ($script:Data.Tasks) {

        $script:Data.Tasks | Where-Object { (-not [string]::IsNullOrEmpty($_.DueDate)) -and ($_.IsCommand -ne $true) } | ForEach-Object {

            try {

                $taskDueDate = [DateTime]::Parse($_.DueDate).Date

                if ($taskDueDate.Month -eq $MonthToDisplay.Month -and $taskDueDate.Year -eq $MonthToDisplay.Year) {

                    if (-not $tasksByDate.ContainsKey($taskDueDate)) { $tasksByDate[$taskDueDate] = 0 }

                    $tasksByDate[$taskDueDate]++

                }

            } catch { /* Ignore tasks with invalid DueDate */ }

        }

    }

   

    Write-Host -NoNewline (" " * ($startOffset * 5)) # Adjust spacing for start offset

   

    for ($day = 1; $day -le $lastDayOfMonth.Day; $day++) {

        $currentDate = Get-Date -Year $MonthToDisplay.Year -Month $MonthToDisplay.Month -Day $day

        $dayOfWeek = [int]$currentDate.DayOfWeek

       

        $dayStr = $day.ToString().PadLeft(2) # Pad to 2 for consistency

        $displayStr = $dayStr

        $fgColor = Get-ThemeProperty "Palette.PrimaryFG"

        $taskIndicator = " "

 

        if ($tasksByDate.ContainsKey($currentDate.Date)) {

            $taskIndicator = "*" # Indicate tasks exist

            $count = $tasksByDate[$currentDate.Date]

            if ($count -ge 3) { $fgColor = Get-ThemeProperty "Palette.ErrorFG" }

            elseif ($count -ge 1) { $fgColor = Get-ThemeProperty "Palette.WarningFG" }

        }

       

        if ($currentDate.Date -eq [DateTime]::Today.Date) {

            $fgColor = Get-ThemeProperty "Palette.SuccessFG"

            $displayStr = "[$dayStr]" # Highlight today

        } elseif ($dayOfWeek -eq 0 -or $dayOfWeek -eq 6) { # Weekend

            if($fgColor -eq (Get-ThemeProperty "Palette.PrimaryFG")) {$fgColor = Get-ThemeProperty "Palette.SubtleFG"} # Dim if no tasks

        }

       

        Write-Host -NoNewline (Apply-PSStyle -Text $displayStr.PadRight(3) -FG $fgColor)

        Write-Host -NoNewline (Apply-PSStyle -Text $taskIndicator -FG (Get-ThemeProperty "Palette.InfoFG"))

       

        if ($dayOfWeek -eq 6) { # Saturday

            Write-Host

            if ($day -lt $lastDayOfMonth.Day) { Write-Host -NoNewline "  " }

        } else { Write-Host -NoNewline " " }

    }

    Write-Host "`n"

   

    Write-Host "  Legend: $(Apply-PSStyle -Text '[Today]' -FG (Get-ThemeProperty "Palette.SuccessFG")) | $(Apply-PSStyle -Text 'Tasks*' -FG (Get-ThemeProperty "Palette.InfoFG")) | $(Apply-PSStyle -Text 'Busy (Yellow/Red)' -FG (Get-ThemeProperty "Palette.WarningFG"))"

    Write-Host

   

    $navigationChoice = ""

    while($navigationChoice.ToUpper() -ne "B"){

        $navigationChoice = Read-Host "  [P]revious Month | [N]ext Month | [T]oday's Month | [Y]ear View | [B]ack to Menu"

        switch ($navigationChoice.ToUpper()) {

            "P" { Show-Calendar -MonthToDisplay $MonthToDisplay.AddMonths(-1); return } # Recurse and return to break loop

            "N" { Show-Calendar -MonthToDisplay $MonthToDisplay.AddMonths(1); return }

            "T" { Show-Calendar -MonthToDisplay (Get-Date); return }

            "Y" { Show-YearCalendar -Year $MonthToDisplay.Year; return } # ShowYearCalendar will handle its own loop or return

            "B" { return } # Exit this calendar view

            default { Write-Warning "Invalid choice."}

        }

    }

}

 

function global:Show-YearCalendar {

    param([int]$YearToDisplay = (Get-Date).Year)

   

    Write-Header "Year Calendar - $YearToDisplay"

    

    for ($row = 0; $row -lt 4; $row++) { # 4 rows of 3 months

        $monthsInRow = @()

        for ($col = 0; $col -lt 3; $col++) {

            $monthNum = $row * 3 + $col + 1

            if ($monthNum -le 12) { $monthsInRow += Get-Date -Year $YearToDisplay -Month $monthNum -Day 1 }

        }

       

        Write-Host # Blank line before month names

        foreach ($monthDate in $monthsInRow) {

            Write-Host ("  " + $monthDate.ToString("MMMM").PadRight(22)) -NoNewline -ForegroundColor (Get-ThemeProperty "Palette.InfoFG")

        }

        Write-Host

       

        foreach ($monthDate in $monthsInRow) {

            Write-Host "  Su Mo Tu We Th Fr Sa  " -NoNewline -ForegroundColor (Get-ThemeProperty "Palette.AccentFG")

        }

        Write-Host

       

        $maxWeeks = 6

        $dayBuffers = @{} # Store lines for each month in the row

        foreach($m in $monthsInRow){ $dayBuffers[$m.Month] = @("","","","","","") }

 

        foreach ($monthDate in $monthsInRow) {

            $firstDay = Get-Date $monthDate -Day 1

            $lastDay = $firstDay.AddMonths(1).AddDays(-1)

            $startOffset = [int]$firstDay.DayOfWeek

            

            $currentDay = 1

            for($weekIndex = 0; $weekIndex -lt $maxWeeks; $weekIndex++){

                $line = "  "

                for($dayOfWeekIndex = 0; $dayOfWeekIndex -lt 7; $dayOfWeekIndex++){

                    if(($weekIndex -eq 0 -and $dayOfWeekIndex -lt $startOffset) -or $currentDay -gt $lastDay.Day){

                        $line += "   " # Empty space

                    } else {

                        $dateForCell = Get-Date -Year $YearToDisplay -Month $monthDate.Month -Day $currentDay

                        $displayDay = $currentDay.ToString().PadLeft(2)

                        if($dateForCell.Date -eq [datetime]::Today.Date){

                            $line += Apply-PSStyle -Text $displayDay -FG (Get-ThemeProperty "Palette.SuccessFG") + " "

                        } else {

                            $line += "$displayDay "

                        }

                        $currentDay++

                    }

                }

                $dayBuffers[$monthDate.Month][$weekIndex] = $line.TrimEnd()

            }

        }

        # Print the weeks for the row of months

        for($weekNum = 0; $weekNum -lt $maxWeeks; $weekNum++){

            $fullLine = ""

            foreach($mDate in $monthsInRow){

                $fullLine += ($dayBuffers[$mDate.Month][$weekNum]).PadRight(24) # 24 = 3*7 + 3 spaces

            }

            Write-Host $fullLine

        }

    }

   

    $navigationChoice = Read-Host "`n[P]revious Year | [N]ext Year | [C]hange Year | [B]ack to Monthly Calendar"

    switch($navigationChoice.ToUpper()){

        "P" { Show-YearCalendar -YearToDisplay ($YearToDisplay - 1) }

        "N" { Show-YearCalendar -YearToDisplay ($YearToDisplay + 1) }

        "C" { $newYear = Read-Host "Enter year"; if($newYear -match "^\d{4}$"){ Show-YearCalendar -YearToDisplay ([int]$newYear)} else {Write-Warning "Invalid year."}}

        "B" { return } # Returns to the monthly calendar which called it, or main if called directly

    }

}

 

#endregion

 

#region Progress Bar

 

function global:Draw-ProgressBar {

    param(

        [int]$Percent,

        [int]$Width = 20,

        [string]$FillChar = "█", # Or use themed block characters

        [string]$EmptyChar = "░",

        [string]$ForegroundColorName = "Green",

        [string]$BackgroundColorName = "DarkGray"

    )

    if($Percent -lt 0) {$Percent = 0} elseif($Percent -gt 100) {$Percent = 100}

    if($Width -lt 5) {$Width = 5}

 

    $filledBlocks = [Math]::Floor($Width * ($Percent / 100))

    $emptyBlocks = $Width - $filledBlocks

   

    Write-Host "[" -NoNewline

    Write-Host ($FillChar * $filledBlocks) -NoNewline -ForegroundColor $ForegroundColorName

    Write-Host ($EmptyChar * $emptyBlocks) -NoNewline -ForegroundColor $BackgroundColorName

    Write-Host "] $($Percent.ToString().PadLeft(3))%" -NoNewline # Pad percent for consistent width

}

 

#endregion

 

#region Menu Display

 

function global:Show-MenuSelection {

    param(

        [string]$Title,

        [string[]]$Options,

        [string]$PromptMessage = "Select option",

        [switch]$AllowMultiple,

        [switch]$ReturnIndex

    )

   

    Write-Header $Title

    

    if (-not $Options -or $Options.Count -eq 0) {

        Write-Warning "No options available for selection."

        return if ($AllowMultiple) { @() } else { $null }

    }

 

    for ($i = 0; $i -lt $Options.Count; $i++) { Write-Host "[$($i + 1)] $($Options[$i])" }

   

    if ($AllowMultiple) {

        Write-Host "`nEnter numbers separated by commas (e.g., 1,3,5), 'all', or 'none'."

    } else { Write-Host "`n[0] Cancel selection" }

   

    $selectionInput = Read-Host "`n$PromptMessage"

   

    if ($AllowMultiple) {

        if ($selectionInput.ToLower() -eq 'all') {

            return if ($ReturnIndex) { 0..($Options.Count - 1) } else { $Options }

        } elseif ($selectionInput.ToLower() -eq 'none' -or [string]::IsNullOrWhiteSpace($selectionInput)) {

            return @()

        }

       

        $selectedIndices = $selectionInput -split ',' | ForEach-Object {

            $numStr = $_.Trim()

            if ($numStr -match '^\d+$') {

                $idx = [int]$numStr - 1

                if ($idx -ge 0 -and $idx -lt $Options.Count) {

                    if ($ReturnIndex) { $idx } else { $Options[$idx] }

                } else { Write-Warning "Invalid option number ignored: $numStr" }

            } else { Write-Warning "Invalid input ignored: $numStr" }

        }

        return $selectedIndices | Where-Object {$_ -ne $null}

    } else { # Single selection

        if ($selectionInput -eq '0' -or [string]::IsNullOrWhiteSpace($selectionInput)) { return $null } # Cancelled

       

        if ($selectionInput -match '^\d+$') {

            $idx = [int]$selectionInput - 1

            if ($idx -ge 0 -and $idx -lt $Options.Count) {

                return if ($ReturnIndex) { $idx } else { $Options[$idx] }

            }

        }

        Write-Warning "Invalid selection '$selectionInput'."

        return $null

    }

}

 

#endregion

 

#region Help Display

 

function global:Show-Help {

    Clear-Host

    Write-Header "Help & Documentation - Unified Productivity Suite v5.0"

    

    Write-Host @"

This integrated suite combines time tracking, task management, project

management, Excel integration, and command snippets into a seamless

productivity system.

 

QUICK ACTIONS (use '+' followed by a keyword from any prompt):

-------------------------------------------------------------

  Time: +time, +timer, +stop

  Task: +task, +qa (quick add)

  Views: +today (overview), +v (active timers), +w (week report), +t (task menu)

  Project: +p (project detail), +projects (project menu)

  Snippets: +c or +cmd (command snippets)

  Other: +h or +help (this screen), +? (quick action list)

 

MAIN MENU NAVIGATION:

---------------------

  Use numbers [1-6] to access main sections from the dashboard.

  Use [M, S, A, V, T, W, P, H] for direct dashboard shortcuts.

  [Q] to Quit.

 

KEY CONCEPTS:

-------------

- Projects & Templates: Organize work. Templates (ADMIN, MEETING) are for recurring non-billable time.

- Tasks: Specific to-do items, can be linked to projects. Use `qa` for fast entry.

  Syntax: `qa Task Description #category @tag1 @tag2 !Priority due:yyyy-mm-dd project:KEY est:Hours`

- Time Entries: Log time manually (preferred for accuracy) or via timers. Can be linked to tasks.

- Command Snippets: Store reusable shell commands or code. Accessed via Tools or `+c`.

- Excel Integration: Import project details from pre-formatted Excel files.

 

DATA & SETTINGS:

----------------

- Data stored in: `$script:DataPath` (usually `\$env:USERPROFILE\.ProductivitySuite`)

- Backups: Automatic, stored in `$script:BackupPath`.

- Settings: Configurable via option [6] in the main menu. Includes theme, defaults, etc.

 

COMMON WORKFLOWS:

-----------------

1. Add a Project: Main Menu -> [4] Projects & Clients -> [1] Add Project

2. Add a Task: Main Menu -> [2] Task Management -> [A]dd Task (or use `+qa` or `qa` shortcuts)

3. Log Time Manually: Main Menu -> [1] Time Management -> [1] Manual Time Entry (or `+time`)

4. Start/Stop Timer: Main Menu -> [1] Time Management -> [2]/[3] (or `+timer`/`+stop`)

5. View Today's Tasks: Dashboard -> [T] Today's View (or `+today`)

6. Generate Week Report: Main Menu -> [3] Reports & Analytics -> [1] Week Report (or `+w`)

7. Add Command Snippet: Main Menu -> [5] Tools & Utilities -> [1] Command Snippets -> [A]dd (or `+c`)

8. Import Project from Excel: Main Menu -> [4] Projects & Clients -> [2] Import from Excel

 

TROUBLESHOOTING:

----------------

- If colors look wrong: Your terminal might not fully support ANSI escape codes or PSStyle.

  The script attempts to use basic ConsoleColor names as a fallback.

- "Function not found": Ensure all .ps1 module files are in the same directory as `main.ps1`.

  The script root is detected automatically; verify it's correct if issues persist.

- Data not saving: Check permissions for the data path (`$script:DataPath`).

- Excel errors: Ensure Microsoft Excel is installed for Excel-related features. Use "Test Excel Connection".

 

For further assistance or to report bugs, please refer to the project documentation (if available).

"@ -ForegroundColor (Get-ThemeProperty "Palette.PrimaryFG")

    

    Write-Host "`nPress any key to return to the previous menu..." -ForegroundColor (Get-ThemeProperty "Palette.SubtleFG")

    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")

}

 

#endregion